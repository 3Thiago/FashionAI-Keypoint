#encoding:utf-8
import cv2
import matplotlib.pyplot as plt
import numpy as np
import random
from scipy import ndimage

def flip(img,pts,select_part):
    #水平反转
    points = pts.copy()
    img = cv2.flip(img,1)
    H,W,C = img.shape
    points[:,0] = W - points[:,0]
    # points[[0,1],:] = points[[1,0],:]
    # points[[3,5],:] = points[[5,3],:]
    # points[[4,6],:] = points[[6,4],:]
    points = flip_util(points,select_part)
    return img,points

def flip_util(points, select_part):
    '''
    把水平翻转的点转到相反的位置
    '''
    if select_part == 'trousers':
        points[[0,1],:] = points[[1,0],:]
        points[[3,5],:] = points[[5,3],:]
        points[[4,6],:] = points[[6,4],:]
    elif select_part == 'blouse':
        points[[0,1],:] = points[[1,0],:]
        points[[3,4],:] = points[[4,3],:]
        points[[5,6],:] = points[[6,5],:]
        points[[7,9],:] = points[[9,7],:]
        points[[8,10],:] = points[[10,8],:]
        points[[11,12],:] = points[[12,11],:]
    elif select_part == 'outwear':
        points[[0,1],:] = points[[1,0],:]
        points[[2,3],:] = points[[3,2],:]
        points[[4,5],:] = points[[5,4],:]
        points[[6,7],:] = points[[7,6],:]
        points[[8,10],:] = points[[10,8],:]
        points[[9,11],:] = points[[11,9],:]
        points[[12,13],:] = points[[13,12],:]
    elif select_part == 'dress':
        points[[0,1],:] = points[[1,0],:]
        points[[2,3],:] = points[[3,2],:]
        points[[5,6],:] = points[[6,5],:]
        points[[7,8],:] = points[[8,7],:]
        points[[9,11],:] = points[[11,9],:]
        points[[10,12],:] = points[[12,10],:]
        points[[13,14],:] = points[[14,13],:]
    elif select_part == 'skirt':
        points[[0,1],:] = points[[1,0],:]
        points[[2,3],:] = points[[3,2],:]
    return points
def rot(img, pts, r, shape):
    #旋转
    #https://github.com/jessiechouuu/chainer-pose-hg/blob/eb2ed2f656eb6afb367c43fdd9333bf74eb7c2ba/src/mini_batch_loader.py
    joints = pts.copy()
    h, w, _ = img.shape
    theta = np.radians(r)
    cos, sin = np.cos(theta), np.sin(theta)
    R = np.asarray([[cos,-sin],[sin,cos]])
    joints[:,0] = joints[:,0]-w/2.
    joints[:,1] = joints[:,1]-h/2.
    joints = np.dot(joints,R)
    joints[:,0] = joints[:,0]+w/2.
    joints[:,1] = joints[:,1]+h/2.
                            
    img = ndimage.rotate(img, r, reshape=True)
    joints[:,0] = joints[:,0]+(img.shape[1]-w)/2.
    joints[:,1] = joints[:,1]+(img.shape[0]-h)/2.

    h, w, _ = img.shape
    img = img[h//2-shape[0]//2:h//2 + shape[0]//2, w//2-shape[1]//2:w//2 + shape[1]//2,:]
    joints = np.asarray([(j[0] - (w/2.-shape[1]/2.), j[1] - (h/2.-shape[0]/2.)) for j in joints])     

    return img, joints

def rot(img, pts, pts_pred, r, shape):
    #旋转
    #https://github.com/jessiechouuu/chainer-pose-hg/blob/eb2ed2f656eb6afb367c43fdd9333bf74eb7c2ba/src/mini_batch_loader.py
    joints = pts.copy()
    joints_pred = pts_pred.copy()
    h, w, _ = img.shape
    theta = np.radians(r)
    cos, sin = np.cos(theta), np.sin(theta)
    R = np.asarray([[cos,-sin],[sin,cos]])
    joints[:,0] = joints[:,0]-w/2.
    joints[:,1] = joints[:,1]-h/2.
    joints = np.dot(joints,R)
    joints[:,0] = joints[:,0]+w/2.
    joints[:,1] = joints[:,1]+h/2.

    joints_pred[:,0] = joints_pred[:,0]-w/2.
    joints_pred[:,1] = joints_pred[:,1]-h/2.
    joints_pred = np.dot(joints_pred,R)
    joints_pred[:,0] = joints_pred[:,0]+w/2.
    joints_pred[:,1] = joints_pred[:,1]+h/2.
                            
    img = ndimage.rotate(img, r, reshape=True)
    joints[:,0] = joints[:,0]+(img.shape[1]-w)/2.
    joints[:,1] = joints[:,1]+(img.shape[0]-h)/2.

    joints_pred[:,0] = joints_pred[:,0]+(img.shape[1]-w)/2.
    joints_pred[:,1] = joints_pred[:,1]+(img.shape[0]-h)/2.

    h, w, _ = img.shape
    img = img[h//2-shape[0]//2:h//2 + shape[0]//2, w//2-shape[1]//2:w//2 + shape[1]//2,:]
    joints = np.asarray([(j[0] - (w/2.-shape[1]/2.), j[1] - (h/2.-shape[0]/2.)) for j in joints])
    joints_pred = np.asarray([(j[0] - (w/2.-shape[1]/2.), j[1] - (h/2.-shape[0]/2.)) for j in joints_pred])   

    return img, joints, joints_pred
def gauss2D(shape):
    if shape==7:
        h = 255*np.array([
                [0.0529,  0.1197,  0.1954,  0.2301,  0.1954,  0.1197,  0.0529],
                [0.1197,  0.2709,  0.4421,  0.5205,  0.4421,  0.2709,  0.1197],
                [0.1954,  0.4421,  0.7214,  0.8494,  0.7214,  0.4421,  0.1954],
                [0.2301,  0.5205,  0.8494,  1.0000,  0.8494,  0.5205,  0.2301],
                [0.1954,  0.4421,  0.7214,  0.8494,  0.7214,  0.4421,  0.1954],
                [0.1197,  0.2709,  0.4421,  0.5205,  0.4421,  0.2709,  0.1197],
                [0.0529,  0.1197,  0.1954,  0.2301,  0.1954,  0.1197,  0.0529]])
    elif shape==13:
        h = 255*np.array([[0.0444, 0.0714, 0.1054, 0.1427, 0.1772, 0.2018, 0.2107, 0.2018, 0.1772, 0.1427, 0.1054, 0.0714, 0.0444],
                    [0.0714, 0.115 , 0.1697, 0.2297, 0.2852, 0.3247, 0.3391, 0.3247, 0.2852, 0.2297, 0.1697, 0.115 , 0.0714],
                    [0.1054, 0.1697, 0.2505, 0.3391, 0.421 , 0.4793, 0.5005, 0.4793, 0.421 , 0.3391, 0.2505, 0.1697, 0.1054],
                    [0.1427, 0.2297, 0.3391, 0.459 , 0.5699, 0.6488, 0.6775, 0.6488, 0.5699, 0.459 , 0.3391, 0.2297, 0.1427],
                    [0.1772, 0.2852, 0.421 , 0.5699, 0.7074, 0.8055, 0.8411, 0.8055, 0.7074, 0.5699, 0.421 , 0.2852, 0.1772],
                    [0.2018, 0.3247, 0.4793, 0.6488, 0.8055, 0.9171, 0.9576, 0.9171, 0.8055, 0.6488, 0.4793, 0.3247, 0.2018],
                    [0.2107, 0.3391, 0.5005, 0.6775, 0.8411, 0.9576, 1.    , 0.9576, 0.8411, 0.6775, 0.5005, 0.3391, 0.2107],
                    [0.2018, 0.3247, 0.4793, 0.6488, 0.8055, 0.9171, 0.9576, 0.9171, 0.8055, 0.6488, 0.4793, 0.3247, 0.2018],
                    [0.1772, 0.2852, 0.421 , 0.5699, 0.7074, 0.8055, 0.8411, 0.8055, 0.7074, 0.5699, 0.421 , 0.2852, 0.1772],
                    [0.1427, 0.2297, 0.3391, 0.459 , 0.5699, 0.6488, 0.6775, 0.6488, 0.5699, 0.459 , 0.3391, 0.2297, 0.1427],
                    [0.1054, 0.1697, 0.2505, 0.3391, 0.421 , 0.4793, 0.5005, 0.4793, 0.421 , 0.3391, 0.2505, 0.1697, 0.1054],
                    [0.0714, 0.115 , 0.1697, 0.2297, 0.2852, 0.3247, 0.3391, 0.3247, 0.2852, 0.2297, 0.1697, 0.115 , 0.0714],
                    [0.0444, 0.0714, 0.1054, 0.1427, 0.1772, 0.2018, 0.2107, 0.2018, 0.1772, 0.1427, 0.1054, 0.0714, 0.0444]])
    if shape == 25: # sigma=7
        h = 255*np.array([[0.0529, 0.0669, 0.0829, 0.1006, 0.1197, 0.1395, 0.1593, 0.1782,
        0.1954, 0.2098, 0.2208, 0.2277, 0.23  , 0.2277, 0.2208, 0.2098,
        0.1954, 0.1782, 0.1593, 0.1395, 0.1197, 0.1006, 0.0829, 0.0669,
        0.0529],
       [0.0669, 0.0846, 0.1048, 0.1272, 0.1514, 0.1764, 0.2014, 0.2254,
        0.2471, 0.2653, 0.2792, 0.2879, 0.2909, 0.2879, 0.2792, 0.2653,
        0.2471, 0.2254, 0.2014, 0.1764, 0.1514, 0.1272, 0.1048, 0.0846,
        0.0669],
       [0.0829, 0.1048, 0.1299, 0.1577, 0.1875, 0.2186, 0.2496, 0.2792,
        0.3061, 0.3288, 0.346 , 0.3567, 0.3604, 0.3567, 0.346 , 0.3288,
        0.3061, 0.2792, 0.2496, 0.2186, 0.1875, 0.1577, 0.1299, 0.1048,
        0.0829],
       [0.1006, 0.1272, 0.1577, 0.1914, 0.2277, 0.2653, 0.303 , 0.339 ,
        0.3716, 0.3991, 0.42  , 0.4331, 0.4375, 0.4331, 0.42  , 0.3991,
        0.3716, 0.339 , 0.303 , 0.2653, 0.2277, 0.1914, 0.1577, 0.1272,
        0.1006],
       [0.1197, 0.1514, 0.1875, 0.2277, 0.2708, 0.3156, 0.3604, 0.4032,
        0.442 , 0.4747, 0.4996, 0.5151, 0.5204, 0.5151, 0.4996, 0.4747,
        0.442 , 0.4032, 0.3604, 0.3156, 0.2708, 0.2277, 0.1875, 0.1514,
        0.1197],
       [0.1395, 0.1764, 0.2186, 0.2653, 0.3156, 0.3678, 0.42  , 0.4699,
        0.5151, 0.5533, 0.5822, 0.6003, 0.6065, 0.6003, 0.5822, 0.5533,
        0.5151, 0.4699, 0.42  , 0.3678, 0.3156, 0.2653, 0.2186, 0.1764,
        0.1395],
       [0.1593, 0.2014, 0.2496, 0.303 , 0.3604, 0.42  , 0.4796, 0.5366,
        0.5882, 0.6317, 0.6648, 0.6855, 0.6925, 0.6855, 0.6648, 0.6317,
        0.5882, 0.5366, 0.4796, 0.42  , 0.3604, 0.303 , 0.2496, 0.2014,
        0.1593],
       [0.1782, 0.2254, 0.2792, 0.339 , 0.4032, 0.4699, 0.5366, 0.6003,
        0.6581, 0.7068, 0.7438, 0.7669, 0.7748, 0.7669, 0.7438, 0.7068,
        0.6581, 0.6003, 0.5366, 0.4699, 0.4032, 0.339 , 0.2792, 0.2254,
        0.1782],
       [0.1954, 0.2471, 0.3061, 0.3716, 0.442 , 0.5151, 0.5882, 0.6581,
        0.7214, 0.7748, 0.8153, 0.8407, 0.8493, 0.8407, 0.8153, 0.7748,
        0.7214, 0.6581, 0.5882, 0.5151, 0.442 , 0.3716, 0.3061, 0.2471,
        0.1954],
       [0.2098, 0.2653, 0.3288, 0.3991, 0.4747, 0.5533, 0.6317, 0.7068,
        0.7748, 0.8322, 0.8757, 0.9029, 0.9122, 0.9029, 0.8757, 0.8322,
        0.7748, 0.7068, 0.6317, 0.5533, 0.4747, 0.3991, 0.3288, 0.2653,
        0.2098],
       [0.2208, 0.2792, 0.346 , 0.42  , 0.4996, 0.5822, 0.6648, 0.7438,
        0.8153, 0.8757, 0.9216, 0.9502, 0.96  , 0.9502, 0.9216, 0.8757,
        0.8153, 0.7438, 0.6648, 0.5822, 0.4996, 0.42  , 0.346 , 0.2792,
        0.2208],
       [0.2277, 0.2879, 0.3567, 0.4331, 0.5151, 0.6003, 0.6855, 0.7669,
        0.8407, 0.9029, 0.9502, 0.9797, 0.9898, 0.9797, 0.9502, 0.9029,
        0.8407, 0.7669, 0.6855, 0.6003, 0.5151, 0.4331, 0.3567, 0.2879,
        0.2277],
       [0.23  , 0.2909, 0.3604, 0.4375, 0.5204, 0.6065, 0.6925, 0.7748,
        0.8493, 0.9122, 0.96  , 0.9898, 1.    , 0.9898, 0.96  , 0.9122,
        0.8493, 0.7748, 0.6925, 0.6065, 0.5204, 0.4375, 0.3604, 0.2909,
        0.23  ],
       [0.2277, 0.2879, 0.3567, 0.4331, 0.5151, 0.6003, 0.6855, 0.7669,
        0.8407, 0.9029, 0.9502, 0.9797, 0.9898, 0.9797, 0.9502, 0.9029,
        0.8407, 0.7669, 0.6855, 0.6003, 0.5151, 0.4331, 0.3567, 0.2879,
        0.2277],
       [0.2208, 0.2792, 0.346 , 0.42  , 0.4996, 0.5822, 0.6648, 0.7438,
        0.8153, 0.8757, 0.9216, 0.9502, 0.96  , 0.9502, 0.9216, 0.8757,
        0.8153, 0.7438, 0.6648, 0.5822, 0.4996, 0.42  , 0.346 , 0.2792,
        0.2208],
       [0.2098, 0.2653, 0.3288, 0.3991, 0.4747, 0.5533, 0.6317, 0.7068,
        0.7748, 0.8322, 0.8757, 0.9029, 0.9122, 0.9029, 0.8757, 0.8322,
        0.7748, 0.7068, 0.6317, 0.5533, 0.4747, 0.3991, 0.3288, 0.2653,
        0.2098],
       [0.1954, 0.2471, 0.3061, 0.3716, 0.442 , 0.5151, 0.5882, 0.6581,
        0.7214, 0.7748, 0.8153, 0.8407, 0.8493, 0.8407, 0.8153, 0.7748,
        0.7214, 0.6581, 0.5882, 0.5151, 0.442 , 0.3716, 0.3061, 0.2471,
        0.1954],
       [0.1782, 0.2254, 0.2792, 0.339 , 0.4032, 0.4699, 0.5366, 0.6003,
        0.6581, 0.7068, 0.7438, 0.7669, 0.7748, 0.7669, 0.7438, 0.7068,
        0.6581, 0.6003, 0.5366, 0.4699, 0.4032, 0.339 , 0.2792, 0.2254,
        0.1782],
       [0.1593, 0.2014, 0.2496, 0.303 , 0.3604, 0.42  , 0.4796, 0.5366,
        0.5882, 0.6317, 0.6648, 0.6855, 0.6925, 0.6855, 0.6648, 0.6317,
        0.5882, 0.5366, 0.4796, 0.42  , 0.3604, 0.303 , 0.2496, 0.2014,
        0.1593],
       [0.1395, 0.1764, 0.2186, 0.2653, 0.3156, 0.3678, 0.42  , 0.4699,
        0.5151, 0.5533, 0.5822, 0.6003, 0.6065, 0.6003, 0.5822, 0.5533,
        0.5151, 0.4699, 0.42  , 0.3678, 0.3156, 0.2653, 0.2186, 0.1764,
        0.1395],
       [0.1197, 0.1514, 0.1875, 0.2277, 0.2708, 0.3156, 0.3604, 0.4032,
        0.442 , 0.4747, 0.4996, 0.5151, 0.5204, 0.5151, 0.4996, 0.4747,
        0.442 , 0.4032, 0.3604, 0.3156, 0.2708, 0.2277, 0.1875, 0.1514,
        0.1197],
       [0.1006, 0.1272, 0.1577, 0.1914, 0.2277, 0.2653, 0.303 , 0.339 ,
        0.3716, 0.3991, 0.42  , 0.4331, 0.4375, 0.4331, 0.42  , 0.3991,
        0.3716, 0.339 , 0.303 , 0.2653, 0.2277, 0.1914, 0.1577, 0.1272,
        0.1006],
       [0.0829, 0.1048, 0.1299, 0.1577, 0.1875, 0.2186, 0.2496, 0.2792,
        0.3061, 0.3288, 0.346 , 0.3567, 0.3604, 0.3567, 0.346 , 0.3288,
        0.3061, 0.2792, 0.2496, 0.2186, 0.1875, 0.1577, 0.1299, 0.1048,
        0.0829],
       [0.0669, 0.0846, 0.1048, 0.1272, 0.1514, 0.1764, 0.2014, 0.2254,
        0.2471, 0.2653, 0.2792, 0.2879, 0.2909, 0.2879, 0.2792, 0.2653,
        0.2471, 0.2254, 0.2014, 0.1764, 0.1514, 0.1272, 0.1048, 0.0846,
        0.0669],
       [0.0529, 0.0669, 0.0829, 0.1006, 0.1197, 0.1395, 0.1593, 0.1782,
        0.1954, 0.2098, 0.2208, 0.2277, 0.23  , 0.2277, 0.2208, 0.2098,
        0.1954, 0.1782, 0.1593, 0.1395, 0.1197, 0.1006, 0.0829, 0.0669,
        0.0529]])


    return h

def getGauss2D(shape, sigma):
    a = cv2.getGaussianKernel(shape, sigma)
    b = cv2.getGaussianKernel(shape, sigma)
    c = np.multiply(a, b.transpose())
    c /= c.max()
    return (c*10000).astype(np.int)*1.0 / 10000

def random_color_distortion(img):
    img = RandomBrightness(img)
    img = RandomHue(img)
    img = RandomSaturation(img)
    return img

def random_bright(img, delta=16):
    alpha = random.random()
    if alpha > 0.3:
        img = img * alpha + random.randrange(-delta,delta)
        img = img.clip(min=0,max=255).astype(np.uint8)
    return img

def RandomBrightness(bgr):
    if random.random() < 0.5:
        hsv = BGR2HSV(bgr)
        # h,s,v = cv2.split(hsv)
        h,s,v = hsv[:,:,0], hsv[:,:,1], hsv[:,:,2]
        adjust = random.choice([0.5,1.5])
        v = v*adjust
        v = np.clip(v, 0, 255).astype(hsv.dtype)
        hsv = cv2.merge((h,s,v))
        bgr = HSV2BGR(hsv)
    return bgr
def RandomSaturation(bgr):
    if random.random() < 0.5:
        hsv = BGR2HSV(bgr)
        # h,s,v = cv2.split(hsv)
        h,s,v = hsv[:,:,0], hsv[:,:,1], hsv[:,:,2]
        adjust = random.choice([0.5,1.5])
        s = s*adjust
        s = np.clip(s, 0, 255).astype(hsv.dtype)
        hsv = cv2.merge((h,s,v))
        bgr = HSV2BGR(hsv)
    return bgr
def RandomHue(bgr):
    if random.random() < 0.5:
        hsv = BGR2HSV(bgr)
        # h,s,v = cv2.split(hsv)
        h,s,v = hsv[:,:,0], hsv[:,:,1], hsv[:,:,2]
        adjust = random.choice([0.5,1.5])
        h = h*adjust
        h = np.clip(h, 0, 255).astype(hsv.dtype)
        hsv = cv2.merge((h,s,v))
        bgr = HSV2BGR(hsv)
    return bgr
def BGR2HSV(img):
    return cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
def HSV2BGR(img):
    return cv2.cvtColor(img,cv2.COLOR_HSV2BGR)